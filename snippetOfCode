// Retourner objet JSON
	private static String readAll(Reader rd) throws IOException { 
		
		StringBuilder sb = new StringBuilder(); 
		int cp;
		while ((cp = rd.read()) != -1) { 
			sb.append((char) cp); 
			} 
		return sb.toString(); 
		} 

	public static JSONObject readJsonFromUrl() throws IOException, JSONException { 
		String url = "https://s3-eu-west-1.amazonaws.com/course.oc-static.com/projects/DA+Java+EN/P5+/data.json";
		InputStream is = new URL(url).openStream(); 
		try { 
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8"))); 
			String jsonText = readAll(rd); 
			JSONObject json = new JSONObject(jsonText); 
			return json; 
		}
		finally { 
			is.close();  
		}
	}
	---------------------------------------------------------------------------------------------
	// Trois facons d'utiliser des lambdas
		public List<Person> findByFirstName(String firstName) {

		return store.getPersons().stream()
//				.map(Person::getFirstName)
//				.map(p -> p.getFirstName())
				.filter(fm -> firstName.equals(fm.getFirstName()))
				.collect(Collectors.toList());
	}
	
-----------------------------------------------------------------------------------------------------
// Une autre facon travailler avec les Optionals
	
			Optional.ofNullable(personToUpdate.getEmail()).ifPresent(email -> person.setEmail(email));